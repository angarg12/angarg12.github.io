[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/decimal.js",
    "content": "// Lazy-load - we might not need decimal. It's a peerDependency, so the parent\n// library must include it if needed - we don't, because many callers don't need\n// it.\nlet Decimal\nexport function requireDecimal(config) {\n  return (config && config.Decimal) || Decimal || (Decimal = (function() {\n    // Allow node callers to inject their own decimal.js, because I am sick to\n    // death of trying to wrangle require/webpack/import/etc.\n    if (global && global.Decimal) {\n      return global.Decimal\n    }\n    // `nwb.config.js: extenals` ensures this points to window.Decimal for umd (`<script src=\"...\">`) builds\n    return require('decimal.js')\n  })())\n}\n",
    "static": true,
    "longname": "src/decimal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "requireDecimal",
    "memberof": "src/decimal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal.js~requireDecimal",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/decimal.js",
    "importStyle": "{requireDecimal}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "src/format.js",
    "content": "// Can't comment a .json file, but the suffixes come from these pages:\n// http://home.kpn.nl/vanadovv/BignumbyN.html\nimport standardSuffixes from '../static/standard-suffixes.json'\nimport longScaleSuffixes from '../static/long-scale-suffixes.json'\nimport {requireDecimal} from './decimal'\n\n// TODO: use this page to generate names dynamically, for even larger numbers:\n//   http://mathforum.org/library/drmath/view/59154.html\n\nfunction validate(condition, message) {\n  if (!condition) {\n    throw new Error(message)\n  }\n  return condition\n}\n\n// polyfill IE and phantomjs\nconst log10 = (() => {\n  if (!!Math.log10) {\n    return Math.log10\n  }\n  return function(val) {\n    let ret = Math.log(val) / Math.LN10;\n    // bloody stupid rounding errors\n    ret = Math.round(ret * 1e6) / 1e6\n    return ret\n  }\n})()\n\n// Math.floor() to a specified number of sigfigs for native JS numbers.\n// Like Decimal.floor(sigfigs).\n// Based on http://blog.magnetiq.com/post/497605344/rounding-to-a-certain-significant-figures-in\nfunction floorSigfigs(n, sig) {\n  if (!sig) return n\n  if (n < 0) return -floorSigfigs(-n, sig)\n  var mult = Math.pow(10,\n    sig - Math.floor(Math.log(n) / Math.LN10) - 1)\n  return Math.floor(n * mult) / mult\n}\nconst backends = {\n  'native': {\n    normalize(val) {\n      return val\n    },\n    // Suffixes are a list - which index of the list do we want?\n    // _index(999) === 0\n    // _index(1000) === 1\n    // _index(1000000) === 2\n    index(val) {\n      // string length is faster but fails for length >= 20, where JS starts\n      // formatting with e\n      return Math.max(0, Math.floor(log10(Math.abs(val))/3))\n    },\n    prefix(val, index, {sigfigs}) {\n      // `sigfigs||undefined` supports sigfigs=[null|0], #15\n      return floorSigfigs(val / Math.pow(1000, index), sigfigs).toPrecision(sigfigs || undefined)\n    },\n  },\n  'decimal.js': {\n    // api docs: https://mikemcl.github.io/decimal.js/\n    _requireDecimal(config) {\n      const Decimal = requireDecimal(config)\n      if (!Decimal) throw new Error('requireDecimal() failed')\n      //return Decimal.clone(config)\n      return Decimal.clone ? Decimal.clone(config) : Decimal\n    },\n    normalize(val, config) {\n      const Decimal = this._requireDecimal(config)\n      return new Decimal(val)\n    },\n    index(val, config) {\n      const Decimal = this._requireDecimal(config)\n      // index = val.log10().dividedToIntegerBy(Decimal.log 1000)\n      // Decimal.log() is too slow for large numbers. Docs say performance degrades exponentially as # digits increases, boo.\n      // Lucky me, the length is used by decimal.js internally: num.e\n      // this is in the docs, so I think it's stable enough to use...\n      // Actually, not quite. decimal.js, decimal.js-light, and break_infinity\n      // are all slightly different here. Not worth separate adapters yet.\n      val = new Decimal(val)\n      const e = val.exponent\n        ? typeof val.exponent === 'function'\n          // decimal.js-light\n          ? val.exponent()\n          // break_infinity.js\n          : val.exponent\n        // decimal.js\n        : val.e\n      return Math.floor(e / 3)\n    },\n    prefix(val, index, config) {\n      const {sigfigs} = config\n      const Decimal = this._requireDecimal(config)\n      var div = new Decimal(1000).pow(index)\n      // `sigfigs||undefined` supports sigfigs=[null|0], #15\n      return new Decimal(val).dividedBy(div).toPrecision(sigfigs || undefined, Decimal.ROUND_DOWN)\n    },\n  },\n}\n\n// The formatting function.\nfunction _format(val, opts) {\n  const backend = validate(backends[opts.backend], `not a backend: ${opts.backend}`)\n  val = backend.normalize(val, opts)\n  const index = backend.index(val, opts)\n  const suffix = opts.suffixFn(index)\n  // `{sigfigs: undefined|null|0}` for automatic sigfigs is supported.\n  let sigfigs = opts.sigfigs || undefined\n  // optionally format small numbers differently: show decimals without trailing zeros\n  if (Math.abs(val) < opts.maxSmall) {\n    // second param for decimal.js only, native ignores it\n    return val.toPrecision(sigfigs, opts.rounding).replace(/(\\.\\d*[1-9])0+$/, '$1')\n  }\n  // opts.minSuffix: Use JS native formatting for smallish numbers, because\n  // '99,999' is prettier than '99.9k'\n  // it's safe to let Math coerce Decimal.js to infinity here, gt/lt still work\n  if (Math.abs(val) < opts.minSuffix) {\n    val = Math.floor(val)\n    return val.toLocaleString()\n  }\n  // No suffix found: use scientific notation. JS's native toExponential is fine.\n  if (!suffix && suffix !== '') {\n    if (!!sigfigs) {\n      sigfigs -= 1\n    }\n    return val.toExponential(sigfigs).replace('e+', 'e')\n  }\n  // Found a suffix. Calculate the prefix, the number before the suffix.\n  const prefix = backend.prefix(val, index, opts)\n  return `${prefix}${suffix}`\n}\n\nconst defaultOptions = {\n  backend: 'native',\n  flavor: 'full',\n  suffixGroup: 'full',\n  suffixFn(index) {\n    var suffixes = this.suffixes || this.suffixGroups[this.suffixGroup]\n    validate(suffixes, `no such suffixgroup: ${this.suffixGroup}`)\n    if (index < suffixes.length) {\n      return suffixes[index] || ''\n    }\n    // return undefined\n  },\n  // minimum value to use any suffix, because '99,900' is prettier than '99.9k'\n  minSuffix: 1e5,\n  // don't use sigfigs for smallish numbers. #13\n  minSuffixSigfigs: false,\n  // Special formatting for numbers with a decimal point\n  maxSmall: 0,\n  sigfigs: 3, // often overridden by flavor\n  format: 'standard'\n}\n// User-visible format choices, like on swarmsim's options screen.\n// Each has a different set of options.\nexport const Formats = {\n  standard: {suffixGroups: standardSuffixes},\n  // like standard formatting, with a different set of suffixes\n  longScale: {suffixGroups: longScaleSuffixes},\n  // like standard formatting, with no suffixes at all\n  scientific: {suffixGroups: {full: [], short: []}},\n  // like standard formatting, with a smaller set of suffixes\n  hybrid: {\n    suffixGroups: {\n      full: standardSuffixes.full.slice(0, 12),\n      short: standardSuffixes.short.slice(0, 12),\n    },\n  },\n  // like standard formatting, with a different/infinite set of suffixes\n  engineering: {suffixFn: index => index === 0 ? '' : `E${index*3}`},\n}\n// A convenient way for the developer to modify formatters.\n// These are different from formats - not user-visible.\nconst Flavors = {\n  full: {suffixGroup: 'full', sigfigs: 5},\n  short: {suffixGroup: 'short', sigfigs: 3},\n}\n// Allow callers to extend formats and flavors.\ndefaultOptions.formats = Formats\ndefaultOptions.flavors = Flavors\n\nexport class Formatter {\n  /**\n   * @param {Object} opts All formatter configuration.\n   * @param {string} [opts.flavor='full'] 'full' or 'short'. Flavors can modify any number of other options here. Full is the default; short has fewer sigfigs and shorter standard-suffixes.\n   * @param {Object} [opts.flavors] Specify your own custom flavors.\n   * @param {string} [opts.backend='native'] 'native' or 'decimal.js'.\n   * @param {string} [opts.suffixGroup]\n   * @param {Function} [opts.suffixFn]\n   * @param {number} [opts.minSuffix=1e5]\n   * @param {number} [opts.maxSmall=0] Special formatting for numbers with a decimal point\n   * @param {number} [opts.sigfigs=5]\n   * @param {number} [opts.format='standard'] 'standard', 'hybrid', 'scientific', 'longScale'.\n   * @param {Object} [opts.formats] Specify your own custom formats.\n   * @param {Function} [opts.Decimal] With the decimal.js backend, use this custom decimal.js constructor, like decimal.js-light or break_infinity.js. By default, we'll try to import decimal.js.\n   */\n  constructor(opts = {}) {\n    /** @type Object */\n    this.opts = opts\n    // create convenience methods for each flavor\n    var flavors = Object.keys(this._normalizeOpts().flavors)\n    // the fn(i) is for stupid binding tricks with the looped fn(val, opts)\n    for (var i=0; i < flavors.length; i++) (i => {\n      var flavor = flavors[i]\n      // capitalize the first letter to camel-case method name, like formatShort\n      var key = 'format' + flavor.charAt(0).toUpperCase() + flavor.substr(1)\n      /** @ignore */\n      this[key] = (val, opts) => this.formatFlavor(val, flavor, opts)\n    })(i)\n  }\n\n  _normalizeOpts(opts={}) {\n    // all the user-specified opts, no defaults\n    opts = Object.assign({}, this.opts, opts)\n    // opts.format redefines some other opts, but should never override the user's opts\n    var format = opts && opts.format\n    var formats = (opts && opts.formats) || defaultOptions.formats\n    var formatOptions = formats[format || defaultOptions.format]\n    validate(formatOptions, `no such format: ${format}`)\n    var flavor = opts && opts.flavor\n    var flavors = (opts && opts.flavors) || defaultOptions.flavors\n    var flavorOptions = flavors[flavor || defaultOptions.flavor]\n    validate(flavorOptions, `no such flavor: ${flavor}`)\n    // finally, add the implied options: defaults and format-derived\n    return Object.assign({}, defaultOptions, formatOptions, flavorOptions, opts)\n  }\n  /**\n   * @param {number} val\n   * @param {Object} [opts]\n   * @return {number} which suffix to use for this number in a list of suffixes. You can also think of this as \"how many commas are in the number?\"\n   */\n  index(val, opts) {\n    opts = this._normalizeOpts(opts)\n    return backends[opts.backend].index(val, opts)\n  }\n  /**\n   * @param {number} val\n   * @param {Object} [opts]\n   * @return {string} The suffix that this number would use, with no number shown.\n   * @example\n   * new Formatter().suffix(1e6)\n   * // => \" million\"\n   * @example\n   * new Formatter().suffix(1e6, {flavor: \"short\"})\n   * // => \"M\"\n   */\n  suffix(val, opts) {\n    opts = this._normalizeOpts(opts)\n    var index = backends[opts.backend].index(val, opts)\n    return opts.suffixFn(index)\n  }\n  /**\n   * Format a number.\n   * @param {number} val\n   * @param {Object} [opts] Override the options provided to the Formatter constructor.\n   * @return {string} The formatted number.\n   * @example\n   * new Formatter().format(1e6)\n   * // => \"1.0000 million\"\n   */\n  format(val, opts) {\n    opts = this._normalizeOpts(opts)\n    return _format(val, opts)\n  }\n  /**\n   * Format a number with a specified flavor. It's very common to call the formatter with different flavors, so it has its own shortcut.\n   *\n   * `Formatter.formatFull()` and `Formatter.formatShort()` are also available.\n   * @param {number} val\n   * @param {string} flavor 'short' or 'full'. See opts.flavor.\n   * @param {Object} [opts]\n   * @return {string} The formatted number.\n   * @example\n   * new Formatter().format(1e6, 'short')\n   * // => \"1.00M\"\n   */\n  formatFlavor(val, flavor, opts) {\n    return this.format(val, Object.assign({}, opts, {flavor}))\n  }\n  /**\n   * @param {Object} [opts]\n   * @return {string[]} The complete list of formats available. Use this to build an options UI to allow your players to choose their favorite format.\n   */\n  listFormats(opts) {\n    opts = this._normalizeOpts(opts)\n    return Object.keys(opts.formats)\n  }\n}\n\nconst numberformat = new Formatter()\nnumberformat.defaultOptions = defaultOptions\nnumberformat.Formatter = Formatter\nexport default numberformat\n\n/**\n * Format a number using the default options.\n * @param {number} val\n * @param {Object} [opts]\n * @return string\n * @example\n * format(1e6)\n * // => \"1.0000 million\"\n * @example\n * format(1e6, {sigfigs: 1})\n * // => \"1 million\"\n */\nexport const format = (val, opts) => numberformat.format(val, opts)\n/**\n * Format a full-flavor number using the default options. Identical to `format()`\n * @param {number} val\n * @param {Object} [opts]\n * @return string\n * @example\n * format(1e6)\n * // => \"1.0000 million\"\n */\nexport const formatFull = (val, opts) => numberformat.formatFlavor(val, 'full', opts)\n/**\n * Format a short-flavor number using the default options.\n * @param {number} val\n * @param {Object} [opts]\n * @return string\n * @example\n * format(1e6)\n * // => \"1.00M\"\n */\nexport const formatShort = (val, opts) => numberformat.formatFlavor(val, 'short', opts)\n",
    "static": true,
    "longname": "src/format.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "validate",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~validate",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "log10",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~log10",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "floorSigfigs",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~floorSigfigs",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "sig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "backends",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~backends",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"native\": *, \"decimal.js\": *}"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "_format",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~_format",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~defaultOptions",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"backend\": string, \"flavor\": string, \"suffixGroup\": string, \"suffixFn\": function, \"minSuffix\": number, \"minSuffixSigfigs\": *, \"maxSmall\": *, \"sigfigs\": number, \"format\": string}"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "Formats",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~Formats",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": "{Formats}",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"standard\": *, \"longScale\": *, \"scientific\": *, \"hybrid\": *, \"engineering\": *}"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "Flavors",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~Flavors",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"full\": *, \"short\": *}"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "class",
    "name": "Formatter",
    "memberof": "src/format.js",
    "static": true,
    "longname": "src/format.js~Formatter",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": "{Formatter}",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 12,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#constructor",
    "access": null,
    "description": "",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "All formatter configuration."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'full'",
        "defaultRaw": "'full'",
        "name": "opts.flavor",
        "description": "'full' or 'short'. Flavors can modify any number of other options here. Full is the default; short has fewer sigfigs and shorter standard-suffixes."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts.flavors",
        "description": "Specify your own custom flavors."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'native'",
        "defaultRaw": "'native'",
        "name": "opts.backend",
        "description": "'native' or 'decimal.js'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opts.suffixGroup",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "opts.suffixFn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1e5",
        "defaultRaw": 100000,
        "name": "opts.minSuffix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "opts.maxSmall",
        "description": "Special formatting for numbers with a decimal point"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "opts.sigfigs",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'standard'",
        "defaultRaw": "'standard'",
        "name": "opts.format",
        "description": "'standard', 'hybrid', 'scientific', 'longScale'."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts.formats",
        "description": "Specify your own custom formats."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "opts.Decimal",
        "description": "With the decimal.js backend, use this custom decimal.js constructor, like decimal.js-light or break_infinity.js. By default, we'll try to import decimal.js."
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "opts",
    "memberof": "src/format.js~Formatter",
    "static": false,
    "longname": "src/format.js~Formatter#opts",
    "access": null,
    "description": null,
    "lineNumber": 198,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/format.js~Formatter",
    "static": false,
    "longname": "src/format.js~Formatter#[key]",
    "access": null,
    "description": null,
    "lineNumber": 207,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "_normalizeOpts",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#_normalizeOpts",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "index",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#index",
    "access": null,
    "description": "",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "which suffix to use for this number in a list of suffixes. You can also think of this as \"how many commas are in the number?\""
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "suffix",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#suffix",
    "access": null,
    "description": "",
    "examples": [
      "new Formatter().suffix(1e6)\n// => \" million\"",
      "new Formatter().suffix(1e6, {flavor: \"short\"})\n// => \"M\""
    ],
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The suffix that this number would use, with no number shown."
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "format",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#format",
    "access": null,
    "description": "Format a number.",
    "examples": [
      "new Formatter().format(1e6)\n// => \"1.0000 million\""
    ],
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Override the options provided to the Formatter constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted number."
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "formatFlavor",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#formatFlavor",
    "access": null,
    "description": "Format a number with a specified flavor. It's very common to call the formatter with different flavors, so it has its own shortcut.\n\n`Formatter.formatFull()` and `Formatter.formatShort()` are also available.",
    "examples": [
      "new Formatter().format(1e6, 'short')\n// => \"1.00M\""
    ],
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "flavor",
        "description": "'short' or 'full'. See opts.flavor."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formatted number."
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "listFormats",
    "memberof": "src/format.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/format.js~Formatter#listFormats",
    "access": null,
    "description": "",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The complete list of formats available. Use this to build an options UI to allow your players to choose their favorite format."
    }
  },
  {
    "__docId__": 21,
    "kind": "function",
    "name": "format",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~format",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": "{format}",
    "description": "Format a number using the default options.",
    "examples": [
      "format(1e6)\n// => \"1.0000 million\"",
      "format(1e6, {sigfigs: 1})\n// => \"1 million\""
    ],
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "string"
    }
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "formatFull",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~formatFull",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": "{formatFull}",
    "description": "Format a full-flavor number using the default options. Identical to `format()`",
    "examples": [
      "format(1e6)\n// => \"1.0000 million\""
    ],
    "lineNumber": 316,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "string"
    }
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "formatShort",
    "memberof": "src/format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/format.js~formatShort",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/format.js",
    "importStyle": "{formatShort}",
    "description": "Format a short-flavor number using the default options.",
    "examples": [
      "format(1e6)\n// => \"1.00M\""
    ],
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "string"
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "src/format.test.js",
    "content": "import numberformat from './format'\nimport Decimal from 'decimal.js'\nimport LDecimal from 'decimal.js-light'\nimport BDecimal from 'break_infinity.js'\n\ndescribe('numberformat', () => {\n  it('builds formatters', () => {\n    expect(new numberformat.Formatter({format: 'hybrid'}).opts.format).toBe('hybrid')\n  }),\n  it('formats numbers', () => {\n    const formatter = numberformat\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    //expect(formatter.format(8/9)).toBe('0.889')\n    //expect(formatter.format(1e3)).toBe('1 thousand')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.0000 million')\n    expect(formatter.format(1.1111e6)).toBe('1.1111 million')\n    expect(formatter.format(1.1111e9)).toBe('1.1111 billion')\n    expect(formatter.format(1.1111e12)).toBe('1.1111 trillion')\n    expect(formatter.format(1e21)).toBe('1.0000 sextillion')\n    expect(formatter.format(1e36)).toBe('1.0000 undecillion')\n  })\n  it('formats long-scale numbers', () => {\n    const formatter = new numberformat.Formatter({format: 'longScale'})\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    //expect(formatter.format(8/9)).toBe('0.889')\n    //expect(formatter.format(1e3)).toBe('1 thousand')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.0000 million')\n    expect(formatter.format(1.1111e6)).toBe('1.1111 million')\n    expect(formatter.format(1.1111e9)).toBe('1.1111 milliard')\n    expect(formatter.format(1.1111e12)).toBe('1.1111 billion')\n    expect(formatter.format(1e21)).toBe('1.0000 trilliard')\n    expect(formatter.format(1e36)).toBe('1.0000 sextillion')\n  })\n  it('formats hybrid', () => {\n    const formatter = new numberformat.Formatter({format: 'hybrid'})\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    //expect(formatter.format(8/9)).toBe('0.889')\n    //expect(formatter.format(1e3)).toBe('1 thousand')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.0000 million')\n    expect(formatter.format(1.1111e6)).toBe('1.1111 million')\n    expect(formatter.format(1e36)).toBe('1.0000e36')\n  })\n  it('formats scientificE', () => {\n    const formatter = new numberformat.Formatter({format: 'scientific'})\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    //expect(formatter.format(8/9)).toBe('0.889')\n    //expect(formatter.format(1e3)).toBe('1e3')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.0000e6')\n    expect(formatter.format(1.1111e6)).toBe('1.1111e6')\n    expect(formatter.format(1e36)).toBe('1.0000e36')\n  })\n  it('formats engineering', () => {\n    const formatter = new numberformat.Formatter({format: 'engineering'})\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    //expect(formatter.format(8/9)).toBe('0.889')\n    //expect(formatter.format(1e3)).toBe('1E3')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.0000E6')\n    expect(formatter.format(1.1111e6)).toBe('1.1111E6')\n    expect(formatter.format(1e7)).toBe('10.000E6')\n    expect(formatter.format(1.1111e7)).toBe('11.111E6')\n    expect(formatter.format(1e8)).toBe('100.00E6')\n  })\n  it('formats short numbers', () => {\n    const formatter = new numberformat.Formatter({flavor: 'short'})\n    expect(formatter.format(1)).not.toBe(1)\n    expect(formatter.format(1)).toBe('1')\n    expect(formatter.format(1e3)).toBe('1,000')\n    expect(formatter.format(1e6)).toBe('1.00M')\n    expect(formatter.format(100e3)).toBe('100K')\n    expect(formatter.format(1e9)).toBe('1.00B')\n    expect(formatter.format(1.1111e6)).toBe('1.11M')\n    expect(formatter.format(1.1111e6, {format: 'engineering'})).toBe('1.11E6')\n  })\n  it('supports `opts` as a second argument', () => {\n    const formatter = numberformat\n    expect(formatter.format(1, {flavor: 'short'})).toBe('1')\n    expect(formatter.format(1e3, {flavor: 'short'})).toBe('1,000')\n    expect(formatter.format(1e6, {flavor: 'short'})).toBe('1.00M')\n    expect(formatter.format(100e3, {flavor: 'short'})).toBe('100K')\n    expect(formatter.format(1e9, {flavor: 'short'})).toBe('1.00B')\n    expect(formatter.format(1.1111e6, {flavor: 'short'})).toBe('1.11M')\n  })\n  it('handles bogus formats', () => {\n    const formatter = numberformat\n    expect(() => formatter.format(1, {format: 'bogus'})).toThrow()\n    expect(() => formatter.format(1, {format: 'standard'})).not.toThrow()\n    expect(() => formatter.format(1, {format: null})).not.toThrow()\n  })\n  it('supports suffix-only', () => {\n    const formatter = numberformat\n    expect(formatter.suffix(1e6, {format: 'standard'})).toBe(' million')\n    expect(formatter.suffix(1e6, {format: 'standard', flavor: 'short'})).toBe('M')\n    expect(formatter.suffix(1e6, {format: 'engineering'})).toBe('E6')\n  })\n  it('supports negatives', () => {\n    const formatter = numberformat\n    expect(formatter.format(0)).toBe('0')\n    expect(formatter.format(-1)).toBe('-1')\n    expect(formatter.format(-1e3)).toBe('-1,000')\n    expect(formatter.format(-1e6)).toBe('-1.0000 million')\n    expect(formatter.format(-1e21)).toBe('-1.0000 sextillion')\n  })\n  it('supports small decimals', () => {\n    const formatter = numberformat\n    expect(formatter.format(8/9)).toBe('0')\n    expect(formatter.format(8/9, {maxSmall: 1})).toBe('0.88889')\n    expect(formatter.format(-8/9, {maxSmall: 1})).toBe('-0.88889')\n    expect(formatter.format(8/9, {sigfigs: 3, maxSmall: 1})).toBe('0.889')\n    expect(formatter.format(8/9, {sigfigs: 1, maxSmall: 1})).toBe('0.9')\n    expect(formatter.format(8/9, {flavor: 'short', maxSmall: 1})).toBe('0.889')\n    // zero-sigfigs after the decimal point are truncated\n    expect(formatter.format(0.1, {maxSmall: 1, sigfigs:9})).toBe('0.1')\n    expect(formatter.format(0.11, {maxSmall: 1, sigfigs:9})).toBe('0.11')\n    expect(formatter.format(0.111, {maxSmall: 1, sigfigs:9})).toBe('0.111')\n    expect(formatter.format(0.101, {maxSmall: 1, sigfigs:9})).toBe('0.101')\n  })\n\n  it('formats bigger numbers', () => {\n    const formatter = numberformat\n    expect(formatter.format(1e18)).toBe('1.0000 quintillion')\n    expect(formatter.format(1e18, {flavor: 'short'})).toBe('1.00Qi')\n    // 1e20 is an important breakpoint: JS's native number formatting changes\n    // from '123,456' to '1.23e21'\n    expect(formatter.format(1e21)).toBe('1.0000 sextillion')\n    expect(formatter.format(1e21, {flavor: 'short'})).toBe('1.00Sx')\n  })\n  it('supports decimal.js', () => {\n    const formatter = new numberformat.Formatter({backend: 'decimal.js'})\n    //console.log(new Decimal('1e999').toString())\n    expect(formatter.format('1e9999', {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'), {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'))).toBe('1.0000e9999')\n    expect(formatter.format(new Decimal('1'))).toBe('1')\n    expect(formatter.format(new Decimal('1e3'))).toBe('1,000')\n    expect(formatter.format(new Decimal('1e6'))).toBe('1.0000 million')\n    expect(formatter.format(new Decimal('1.1111e6'))).toBe('1.1111 million')\n    expect(formatter.format(new Decimal('1.1111e9'))).toBe('1.1111 billion')\n    expect(formatter.format(new Decimal('1.1111e12'))).toBe('1.1111 trillion')\n    expect(formatter.format(new Decimal('1e21'))).toBe('1.0000 sextillion')\n    expect(formatter.format(new Decimal('1e36'))).toBe('1.0000 undecillion')\n  })\n  it('supports decimal.js-light', () => {\n    const Decimal = LDecimal\n    const formatter = new numberformat.Formatter({backend: 'decimal.js', Decimal})\n    expect(formatter.format('1e9999', {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'), {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'))).toBe('1.0000e9999')\n    expect(formatter.format(new Decimal('1'))).toBe('1')\n    expect(formatter.format(new Decimal('1e3'))).toBe('1,000')\n    expect(formatter.format(new Decimal('1e6'))).toBe('1.0000 million')\n    expect(formatter.format(new Decimal('1.1111e6'))).toBe('1.1111 million')\n    expect(formatter.format(new Decimal('1.1111e9'))).toBe('1.1111 billion')\n    expect(formatter.format(new Decimal('1.1111e12'))).toBe('1.1111 trillion')\n    expect(formatter.format(new Decimal('1e21'))).toBe('1.0000 sextillion')\n    expect(formatter.format(new Decimal('1e36'))).toBe('1.0000 undecillion')\n  })\n  it('supports break_infinity.js', () => {\n    const Decimal = BDecimal\n    const formatter = new numberformat.Formatter({backend: 'decimal.js', Decimal})\n    expect(formatter.format('1e9999', {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'), {format: 'engineering'})).toBe('1.0000E9999')\n    expect(formatter.format(new Decimal('1e9999'))).toBe('1.0000e9999')\n    expect(formatter.format(new Decimal('1'))).toBe('1')\n    expect(formatter.format(new Decimal('1e3'))).toBe('1,000')\n    expect(formatter.format(new Decimal('1e6'))).toBe('1.0000 million')\n    expect(formatter.format(new Decimal('1.1111e6'))).toBe('1.1111 million')\n    expect(formatter.format(new Decimal('1.1111e9'))).toBe('1.1111 billion')\n    expect(formatter.format(new Decimal('1.1111e12'))).toBe('1.1111 trillion')\n    expect(formatter.format(new Decimal('1e21'))).toBe('1.0000 sextillion')\n    expect(formatter.format(new Decimal('1e36'))).toBe('1.0000 undecillion')\n  })\n  it('has shortcuts for each flavor', () => {\n    const formatter = numberformat\n    expect(!!formatter.formatFull).toBe(true)\n    expect(!!formatter.formatShort).toBe(true)\n    expect(formatter.formatFull(1e6)).toBe('1.0000 million')\n    expect(formatter.formatShort(1e6)).toBe('1.00M')\n  })\n  it('doesn\\'t round smallish numbers by default, #13', () => {\n    const f = numberformat\n    expect(f.format(12345)).toBe('12,345')\n    expect(f.formatShort(12345)).toBe('12,345')\n  })\n  it('doesn\\'t display double suffixes: native, #20', () => {\n    const f = numberformat\n    expect(f.format(1e9-1)).toBe('999.99 million')\n    expect(f.formatShort(1e9-1)).toBe('999M')\n    expect(f.format(1e6-1)).toBe('999.99 thousand')\n    expect(f.formatShort(1e6-1)).toBe('999K')\n  })\n  it('doesn\\'t display double suffixes: decimal.js, #20', () => {\n    const f = new numberformat.Formatter({backend: 'decimal.js'})\n    expect(f.format(1e9-1)).toBe('999.99 million')\n    expect(f.formatShort(1e9-1)).toBe('999M')\n    expect(f.format(1e6-1)).toBe('999.99 thousand')\n    expect(f.formatShort(1e6-1)).toBe('999K')\n  })\n  for (let config0 of [\n    {backend: 'native'},\n    {backend: 'decimal.js'},\n    {name: 'decimal.js-light', backend: 'decimal.js', Decimal: LDecimal},\n    //{name: 'break_infinity.js', backend: 'decimal.js', Decimal: BDecimal},\n  ]) {\n    let {name, ...config} = config0\n    name = name || config.backend\n    const f = new numberformat.Formatter(config)\n    it('supports undefined sigfigs, #15: standard, '+name, () => {\n      expect(f.format(1.00e9, {format: 'standard', sigfigs: undefined})).toBe('1 billion')\n      expect(f.format(1.23e9, {format: 'standard', sigfigs: undefined})).toBe('1.23 billion')\n    })\n    it('supports undefined sigfigs, #15: hybrid, '+name, () => {\n      expect(f.format(1.00e9, {format: 'hybrid', sigfigs: undefined})).toBe('1 billion')\n      expect(f.format(1.23e9, {format: 'hybrid', sigfigs: undefined})).toBe('1.23 billion')\n    })\n    it('supports undefined sigfigs, #15: scientific, '+name, () => {\n      expect(f.format(1.00e9, {format: 'scientific', sigfigs: undefined})).toBe('1e9')\n      expect(f.format(1.23e9, {format: 'scientific', sigfigs: undefined})).toBe('1.23e9')\n    })\n    it('supports undefined sigfigs, #15: engineering, '+name, () => {\n      expect(f.format(1.00e9, {format: 'engineering', sigfigs: undefined})).toBe('1E9')\n      expect(f.format(1.23e9, {format: 'engineering', sigfigs: undefined})).toBe('1.23E9')\n    })\n    it('supports undefined sigfigs, #15: longScale, '+name, () => {\n      expect(f.format(1.00e9, {format: 'longScale', sigfigs: undefined})).toBe('1 milliard')\n      expect(f.format(1.23e9, {format: 'longScale', sigfigs: undefined})).toBe('1.23 milliard')\n    })\n    it('supports undefined sigfigs, #15: standard/short, '+name, () => {\n      expect(f.format(1.00e9, {format: 'standard', sigfigs: undefined, flavor: 'short'})).toBe('1B')\n      expect(f.format(1.23e9, {format: 'standard', sigfigs: undefined, flavor: 'short'})).toBe('1.23B')\n    })\n    it('supports undefined sigfigs, #15: standard/null, '+name, () => {\n      expect(f.format(1.00e9, {format: 'standard', sigfigs: null})).toBe('1 billion')\n      expect(f.format(1.23e9, {format: 'standard', sigfigs: null})).toBe('1.23 billion')\n    })\n    it('supports undefined sigfigs, #15: standard/0, '+name, () => {\n      expect(f.format(1.00e9, {format: 'standard', sigfigs: 0})).toBe('1 billion')\n      expect(f.format(1.23e9, {format: 'standard', sigfigs: 0})).toBe('1.23 billion')\n    })\n  }\n});\n",
    "static": true,
    "longname": "src/format.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "file",
    "name": "src/index.js",
    "content": "export * from './format'\nexport {default as numberformat} from './format'\nexport * from './parse'\n",
    "static": true,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 26,
    "kind": "file",
    "name": "src/parse.js",
    "content": "import standard from '../static/standard-suffixes.json'\nimport longScale from '../static/long-scale-suffixes.json'\nimport {requireDecimal} from './decimal.js'\n\n//const suffixGroups = {standard, longScale}\nconst suffixGroups = {standard} // TODO longscale parsing. There's a duplicate\nconst suffixGroupsToExp = {}\nfor (let groupName of Object.keys(suffixGroups)) {\n  const group = suffixGroups[groupName]\n  const suffixToExp = suffixGroupsToExp[groupName] = {}\n  for (let fkey of Object.keys(group)) {\n    const fg = group[fkey]\n    for (let index in fg) {\n      const suffix = fg[index].toLowerCase()\n      const exp = index * 3\n      if(suffixToExp[suffix] && suffixToExp[suffix].exp === exp,\n        \"duplicate parsenumber suffix with different exponents: \"+suffix)\n      suffixToExp[suffix] = {index, exp, replace:'e'+exp}\n    }\n  }\n}\n\nconst backends = {\n  'native': {\n    parseInt(text, config) {\n      const val = Math.ceil(Number(text, 10))\n      return 'default' in config && !this.isValid(val) ? config['default'] : val\n    },\n    isValid(val) {\n      return (val || val === 0) && !Number.isNaN(val)\n    },\n  },\n  'decimal.js': {\n    parseInt(text, config) {\n      try {\n        const Decimal = requireDecimal(config)\n        const val0 = new Decimal(text)\n        // decimal.js-light doesn't have ceil; use the more general rounding fn.\n        // Not yet worth a separate adapter.\n        const val = val0.ceil\n          ? val0.ceil()\n          : val0.toDecimalPlaces(0, Decimal.ROUND_UP)\n        return this.isValid(val) ? val : config['default']\n      }\n      catch(e) {\n        if ('default' in config) return config.default\n        throw e\n      }\n    },\n    isValid(val) {\n      // decimal.js-light doesn't have isNaN(), it just throws. Test for isNaN only if it exists.\n      return val && (!val.isNaN || !val.isNaN())\n    },\n  },\n}\n\nexport function parse(text, config={}) {\n  if (!text) return config['default'] || null\n  // TODO make this an option\n  const suffixToExp = suffixGroupsToExp[config.suffixGroup || 'standard']\n  const backend = backends[config.backend || 'native']\n  if (!backend) throw new Error('no such backend: '+config.backend)\n  // remove commas. TODO: i18n fail\n  text=text.replace(/,/g, '')\n  // replace suffixes ('billion', etc)\n  const match=/ ?[a-zA-Z]+/.exec(text)\n  if (match && match.length > 0) {\n    const exp = suffixToExp[match[0].toLowerCase()]\n    if (exp) {\n      // ceil(): buy at least this many. The default of floor() is annoying when\n      // we're trying to purchase exactly-n for an upgrade.\n      return backend.parseInt(text.replace(match[0], exp.replace), config)\n    }\n  }\n  // no/invalid suffix found\n  // note that we also get here for a suffix of 'e', like '1e3', because it's not\n  // used as a suffix. Decimal.js will parse it.\n  return backend.parseInt(text, config)\n}\n\nexport class Parser {\n  constructor(config) {\n    this.config = config\n  }\n  parse(text, config={}) {\n    return parse(text, {...this.config, ...config})\n  }\n}\n",
    "static": true,
    "longname": "src/parse.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "name": "suffixGroups",
    "memberof": "src/parse.js",
    "static": true,
    "longname": "src/parse.js~suffixGroups",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/parse.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"standard\": *}"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "name": "suffixGroupsToExp",
    "memberof": "src/parse.js",
    "static": true,
    "longname": "src/parse.js~suffixGroupsToExp",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/parse.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "name": "backends",
    "memberof": "src/parse.js",
    "static": true,
    "longname": "src/parse.js~backends",
    "access": null,
    "export": false,
    "importPath": "swarm-numberformat/src/parse.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"native\": *, \"decimal.js\": *}"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "function",
    "name": "parse",
    "memberof": "src/parse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/parse.js~parse",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/parse.js",
    "importStyle": "{parse}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "class",
    "name": "Parser",
    "memberof": "src/parse.js",
    "static": true,
    "longname": "src/parse.js~Parser",
    "access": null,
    "export": true,
    "importPath": "swarm-numberformat/src/parse.js",
    "importStyle": "{Parser}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 32,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parse.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parse.js~Parser#constructor",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "config",
    "memberof": "src/parse.js~Parser",
    "static": false,
    "longname": "src/parse.js~Parser#config",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "parse",
    "memberof": "src/parse.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parse.js~Parser#parse",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "file",
    "name": "src/parse.test.js",
    "content": "import {parse, Parser} from './parse'\nimport Decimal from 'decimal.js'\nimport LDecimal from 'decimal.js-light'\nimport BDecimal from 'break_infinity.js'\n\ndescribe('parse', () => {\n  it('parses suffixes from user input', () => {\n    expect(parse('10')).toBe(10)\n    expect(parse('10k')).toBe(10000)\n    expect(parse('10x')).toBeNaN()\n    expect(parse('10x', {default: 3})).toBe(3)\n    expect(parse('10,000')).toBe(10000)\n    expect(parse('10 thousand')).toBe(10000)\n    expect(parse('10e3')).toBe(10000)\n    expect(parse('')).toBeNull()\n    expect(parse('', {default: 3})).toBe(3)\n    expect(parse(null)).toBeNull()\n    expect(parse(undefined)).toBeNull()\n    expect(parse('0', {default: 3})).toBe(0)\n    expect(parse('fail')).toBeNaN()\n  })\n  it('parses decimal.js', () => {\n    const parser = new Parser({backend: 'decimal.js'})\n    const parse = (text, config) => parser.parse(text, config)\n    expect(parse('10')).toEqual(new Decimal(10))\n    expect(parse('10k')).toEqual(new Decimal(10000))\n    expect(() => parse('10x')).toThrow()\n    expect(parse('10x', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse('10,000')).toEqual(new Decimal(10000))\n    expect(parse('10 thousand')).toEqual(new Decimal(10000))\n    expect(parse('10e3')).toEqual(new Decimal(10000))\n    expect(parse('')).toBeNull()\n    expect(parse('', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse(null)).toBeNull()\n    expect(parse(undefined)).toBeNull()\n    expect(parse('0', {default: new Decimal(3)})).toEqual(new Decimal(0))\n    expect(() => parse('fail')).toThrow()\n  })\n  it('parses decimal.js-light', () => {\n    const Decimal = LDecimal\n    const parser = new Parser({backend: 'decimal.js', Decimal})\n    const parse = (text, config) => parser.parse(text, config)\n    expect(parse('10')).toEqual(new Decimal(10))\n    expect(parse('10k')).toEqual(new Decimal(10000))\n    expect(() => parse('10x')).toThrow()\n    expect(parse('10x', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse('10,000')).toEqual(new Decimal(10000))\n    expect(parse('10 thousand')).toEqual(new Decimal(10000))\n    expect(parse('10e3')).toEqual(new Decimal(10000))\n    expect(parse('')).toBeNull()\n    expect(parse('', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse(null)).toBeNull()\n    expect(parse(undefined)).toBeNull()\n    expect(parse('0', {default: new Decimal(3)})).toEqual(new Decimal(0))\n    expect(() => parse('fail')).toThrow()\n  })\n  it('parses break_infinity.js', () => {\n    const Decimal = BDecimal\n    const parser = new Parser({backend: 'decimal.js', Decimal})\n    const parse = (text, config) => parser.parse(text, config)\n    expect(parse('10')).toEqual(new Decimal(10))\n    expect(parse('10k')).toEqual(new Decimal(10000))\n    //expect(() => parse('10x')).toThrow()\n    //expect(parse('10x', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse('10,000')).toEqual(new Decimal(10000))\n    expect(parse('10 thousand')).toEqual(new Decimal(10000))\n    expect(parse('10e3')).toEqual(new Decimal(10000))\n    expect(parse('')).toBeNull()\n    expect(parse('', {default: new Decimal(3)})).toEqual(new Decimal(3))\n    expect(parse(null)).toBeNull()\n    expect(parse(undefined)).toBeNull()\n    expect(parse('0', {default: new Decimal(3)})).toEqual(new Decimal(0))\n    //expect(() => parse('fail')).toThrow()\n  })\n})\n",
    "static": true,
    "longname": "src/parse.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]